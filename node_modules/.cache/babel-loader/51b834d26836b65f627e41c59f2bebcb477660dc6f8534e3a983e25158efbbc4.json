{"ast":null,"code":"import { customOpFactory } from '../operations/custom.mjs';\nimport { convertItemToConversationMessage } from './convertItemToConversationMessage.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createOnMessageFunction = (client, modelIntrospection, conversationId, conversationRouteName, getInternals) => handler => {\n  const {\n    conversations\n  } = modelIntrospection;\n  // Safe guard for standalone function. When called as part of client generation, this should never be falsy.\n  if (!conversations) {\n    return {};\n  }\n  const subscribeSchema = conversations[conversationRouteName].message.subscribe;\n  const subscribeOperation = customOpFactory(client, modelIntrospection, 'subscription', subscribeSchema, false, getInternals);\n  return subscribeOperation({\n    conversationId\n  }).subscribe(data => {\n    handler(convertItemToConversationMessage(data));\n  });\n};\nexport { createOnMessageFunction };","map":{"version":3,"names":["createOnMessageFunction","client","modelIntrospection","conversationId","conversationRouteName","getInternals","handler","conversations","subscribeSchema","message","subscribe","subscribeOperation","customOpFactory","data","convertItemToConversationMessage"],"sources":["../../../../../src/runtime/internals/ai/createOnMessageFunction.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { customOpFactory } from '../operations/custom';\nimport { convertItemToConversationMessage } from './convertItemToConversationMessage';\nexport const createOnMessageFunction = (client, modelIntrospection, conversationId, conversationRouteName, getInternals) => (handler) => {\n    const { conversations } = modelIntrospection;\n    // Safe guard for standalone function. When called as part of client generation, this should never be falsy.\n    if (!conversations) {\n        return {};\n    }\n    const subscribeSchema = conversations[conversationRouteName].message.subscribe;\n    const subscribeOperation = customOpFactory(client, modelIntrospection, 'subscription', subscribeSchema, false, getInternals);\n    return subscribeOperation({ conversationId }).subscribe((data) => {\n        handler(convertItemToConversationMessage(data));\n    });\n};\n"],"mappings":";;;AAAA;AACA;AAGY,MAACA,uBAAuB,GAAGA,CAACC,MAAM,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,YAAY,KAAMC,OAAO,IAAK;EACrI,MAAM;IAAEC;EAAa,CAAE,GAAGL,kBAAkB;EAChD;EACI,IAAI,CAACK,aAAa,EAAE;IAChB,OAAO,EAAE;EACjB;EACI,MAAMC,eAAe,GAAGD,aAAa,CAACH,qBAAqB,CAAC,CAACK,OAAO,CAACC,SAAS;EAC9E,MAAMC,kBAAkB,GAAGC,eAAe,CAACX,MAAM,EAAEC,kBAAkB,EAAE,cAAc,EAAEM,eAAe,EAAE,KAAK,EAAEH,YAAY,CAAC;EAC5H,OAAOM,kBAAkB,CAAC;IAAER;EAAc,CAAE,CAAC,CAACO,SAAS,CAAEG,IAAI,IAAK;IAC9DP,OAAO,CAACQ,gCAAgC,CAACD,IAAI,CAAC,CAAC;EACvD,CAAK,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}