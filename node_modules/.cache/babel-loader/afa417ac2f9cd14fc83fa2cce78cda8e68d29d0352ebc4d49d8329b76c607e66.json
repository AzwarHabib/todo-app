{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { __awaiter, __generator } from \"tslib\";\nimport { BLOCK_SIZE } from \"./constants\";\nimport { RawSha256 } from \"./RawSha256\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\nvar Sha256 = /** @class */function () {\n  function Sha256(secret) {\n    this.secret = secret;\n    this.hash = new RawSha256();\n    this.reset();\n  }\n  Sha256.prototype.update = function (toHash) {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n      return this.outer.digest();\n    }\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  Sha256.prototype.digest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.digestSync()];\n      });\n    });\n  };\n  Sha256.prototype.reset = function () {\n    this.hash = new RawSha256();\n    if (this.secret) {\n      this.outer = new RawSha256();\n      var inner = bufferFromSecret(this.secret);\n      var outer = new Uint8Array(BLOCK_SIZE);\n      outer.set(inner);\n      for (var i = 0; i < BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n      this.hash.update(inner);\n      this.outer.update(outer);\n      // overwrite the copied key in memory\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  };\n  return Sha256;\n}();\nexport { Sha256 };\nfunction bufferFromSecret(secret) {\n  var input = convertToBuffer(secret);\n  if (input.byteLength > BLOCK_SIZE) {\n    var bufferHash = new RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n  var buffer = new Uint8Array(BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}","map":{"version":3,"names":["BLOCK_SIZE","RawSha256","isEmptyData","convertToBuffer","Sha256","secret","hash","reset","prototype","update","toHash","error","e","digestSync","outer","finished","digest","inner","bufferFromSecret","Uint8Array","set","i","byteLength","input","bufferHash","buffer"],"sources":["../../src/jsSha256.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}