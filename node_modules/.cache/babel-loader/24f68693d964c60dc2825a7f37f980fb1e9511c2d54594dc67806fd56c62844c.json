{"ast":null,"code":"import { customOpFactory } from '../operations/custom.mjs';\nimport { convertItemToConversationMessage } from './convertItemToConversationMessage.mjs';\nimport { serializeContent, serializeAiContext, serializeToolConfiguration } from './conversationMessageSerializers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createSendMessageFunction = (client, modelIntrospection, conversationId, conversationRouteName, getInternals) => async ({\n  aiContext,\n  content,\n  toolConfiguration\n}) => {\n  const {\n    conversations\n  } = modelIntrospection;\n  // Safe guard for standalone function. When called as part of client generation, this should never be falsy.\n  if (!conversations) {\n    return {};\n  }\n  const sendSchema = conversations[conversationRouteName].message.send;\n  const sendOperation = customOpFactory(client, modelIntrospection, 'mutation', sendSchema, false, getInternals);\n  const {\n    data,\n    errors\n  } = await sendOperation({\n    conversationId,\n    content: serializeContent(content),\n    ...(aiContext && {\n      aiContext: serializeAiContext(aiContext)\n    }),\n    ...(toolConfiguration && {\n      toolConfiguration: serializeToolConfiguration(toolConfiguration)\n    })\n  });\n  return {\n    data: data ? convertItemToConversationMessage(data) : data,\n    errors\n  };\n};\nexport { createSendMessageFunction };","map":{"version":3,"names":["createSendMessageFunction","client","modelIntrospection","conversationId","conversationRouteName","getInternals","aiContext","content","toolConfiguration","conversations","sendSchema","message","send","sendOperation","customOpFactory","data","errors","serializeContent","serializeAiContext","serializeToolConfiguration","convertItemToConversationMessage"],"sources":["../../../../../src/runtime/internals/ai/createSendMessageFunction.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { customOpFactory } from '../operations/custom';\nimport { convertItemToConversationMessage } from './convertItemToConversationMessage';\nimport { serializeAiContext, serializeContent, serializeToolConfiguration, } from './conversationMessageSerializers';\nexport const createSendMessageFunction = (client, modelIntrospection, conversationId, conversationRouteName, getInternals) => async ({ aiContext, content, toolConfiguration }) => {\n    const { conversations } = modelIntrospection;\n    // Safe guard for standalone function. When called as part of client generation, this should never be falsy.\n    if (!conversations) {\n        return {};\n    }\n    const sendSchema = conversations[conversationRouteName].message.send;\n    const sendOperation = customOpFactory(client, modelIntrospection, 'mutation', sendSchema, false, getInternals);\n    const { data, errors } = await sendOperation({\n        conversationId,\n        content: serializeContent(content),\n        ...(aiContext && { aiContext: serializeAiContext(aiContext) }),\n        ...(toolConfiguration && {\n            toolConfiguration: serializeToolConfiguration(toolConfiguration),\n        }),\n    });\n    return {\n        data: data ? convertItemToConversationMessage(data) : data,\n        errors,\n    };\n};\n"],"mappings":";;;;AAAA;AACA;AAIY,MAACA,yBAAyB,GAAGA,CAACC,MAAM,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,YAAY,KAAK,OAAO;EAAEC,SAAS;EAAEC,OAAO;EAAEC;AAAiB,CAAE,KAAK;EAC/K,MAAM;IAAEC;EAAa,CAAE,GAAGP,kBAAkB;EAChD;EACI,IAAI,CAACO,aAAa,EAAE;IAChB,OAAO,EAAE;EACjB;EACI,MAAMC,UAAU,GAAGD,aAAa,CAACL,qBAAqB,CAAC,CAACO,OAAO,CAACC,IAAI;EACpE,MAAMC,aAAa,GAAGC,eAAe,CAACb,MAAM,EAAEC,kBAAkB,EAAE,UAAU,EAAEQ,UAAU,EAAE,KAAK,EAAEL,YAAY,CAAC;EAC9G,MAAM;IAAEU,IAAI;IAAEC;EAAM,CAAE,GAAG,MAAMH,aAAa,CAAC;IACzCV,cAAc;IACdI,OAAO,EAAEU,gBAAgB,CAACV,OAAO,CAAC;IAClC,IAAID,SAAS,IAAI;MAAEA,SAAS,EAAEY,kBAAkB,CAACZ,SAAS;IAAC,CAAE;IAC7D,IAAIE,iBAAiB,IAAI;MACrBA,iBAAiB,EAAEW,0BAA0B,CAACX,iBAAiB;IAC3E,CAAS;EACT,CAAK,CAAC;EACF,OAAO;IACHO,IAAI,EAAEA,IAAI,GAAGK,gCAAgC,CAACL,IAAI,CAAC,GAAGA,IAAI;IAC1DC;EACR,CAAK;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}